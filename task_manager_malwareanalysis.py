import psutil
import os
import time

def clear_screen():
    os.system('cls' if os.name == 'nt' else 'clear')

def get_process_info(proc, essentials=None):
    try:
        with proc.oneshot():
            pid = proc.pid
            try:
                ppid = proc.ppid()
            except Exception:
                ppid = 'Access Denied'
            name = proc.name()
            status = proc.status()
            username = proc.username()
            create_time = time.strftime('%Y-%m-%d %H:%M:%S', time.localtime(proc.create_time()))
            cpu_percent = proc.cpu_percent(interval=0.1)
            memory_percent = proc.memory_percent()
            num_threads = proc.num_threads()
            num_children = len(proc.children())
            exe = proc.exe()
            nice = proc.nice()
            try:
                conns = proc.connections()
                network_status = ', '.join(set([c.status for c in conns])) if conns else 'N/A'
            except Exception:
                network_status = 'N/A'
            # Extension
            import os
            ext = ''
            if exe:
                _, ext = os.path.splitext(exe)
            # Known/Unknown
            known = 'Essential' if essentials and name.lower() in essentials else 'Unknown'
    except (psutil.NoSuchProcess, psutil.AccessDenied, psutil.ZombieProcess):
        return None

    return {
        'PID': pid,
        'PPID': ppid,
        'Name': name,
        'Ext': ext,
        'Status': status,
        'User': username,
        'Created': create_time,
        'CPU%': f"{cpu_percent:.1f}",
        'Mem%': f"{memory_percent:.1f}",
        'Threads': num_threads,
        'Children': num_children,
        'Priority': nice,
        'Location': exe,
        'Network': network_status,
        'Known': known
    }

def load_essential_processes(filepath='essential_processes.txt'):
    essentials = set()
    try:
        with open(filepath, 'r') as f:
            for line in f:
                line = line.strip()
                if line and not line.startswith('#'):
                    essentials.add(line.lower())
    except Exception:
        pass
    return essentials

def list_processes(essentials=None):
    process_list = []
    if essentials is None:
        essentials = set()
    for proc in psutil.process_iter():
        info = get_process_info(proc, essentials)
        if info:
            process_list.append(info)
    return process_list

def print_processes(process_list):
    print("{:<4} {:<7} {:<7} {:<25} {:<6} {:<10} {:<15} {:<10} {:<6} {:<6} {:<8}".format(
        "No.", "PID", "PPID", "Name", "Ext", "Status", "User", "Known", "CPU%", "Mem%", "Type"
    ))
    print("-" * 120)
    for idx, info in enumerate(process_list, 1):
        print("{:<4} {:<7} {:<7} {:<25} {:<6} {:<10} {:<15} {:<10} {:<6} {:<6} {:<8}".format(
            idx, info['PID'], info['PPID'], info['Name'][:24], info['Ext'], info['Status'], info['User'][:14], info['Known'], info['CPU%'], info['Mem%'], info.get('Type', 'Unknown')))

def show_process_details(info):
    print("\nProcess Details:")
    for key, value in info.items():
        print(f"{key:10}: {value}")
    print()

def print_unknown_processes(process_list):
    unknowns = [p for p in process_list if p['Known'] == 'Unknown']
    print("\nUnknown Processes:")
    print("{:<4} {:<7} {:<7} {:<25} {:<6} {:<10} {:<15} {:<6} {:<6}".format(
        "No.", "PID", "PPID", "Name", "Ext", "Status", "User", "CPU%", "Mem%"
    ))
    print("-" * 90)
    for idx, info in enumerate(unknowns, 1):
        print("{:<4} {:<7} {:<7} {:<25} {:<6} {:<10} {:<15} {:<6} {:<6}".format(
            idx, info['PID'], info['PPID'], info['Name'][:24], info['Ext'], info['Status'], info['User'][:14], info['CPU%'], info['Mem%']))
    print(f"\nTotal Unknown Processes: {len(unknowns)}\n")

def main():
    essentials = load_essential_processes('essential_processes.txt')
    while True:
        clear_screen()
        print("Task Manager (Python psutil)\n")
        process_list = list_processes(essentials)
        print_processes(process_list)
        print("\nSelect a process by number to view details, or type 'r' to refresh, 'u' for unknown processes, 'q' to quit.")
        choice = input("Enter choice: ").strip()
        if choice.lower() == 'q':
            print("Exiting.")
            break
        elif choice.lower() == 'r':
            continue
        elif choice.lower() == 'u':
            clear_screen()
            print_unknown_processes(process_list)
            input("Press Enter to return to the process list...")
        elif choice.isdigit():
            idx = int(choice) - 1
            if 0 <= idx < len(process_list):
                clear_screen()
                show_process_details(process_list[idx])
                input("Press Enter to return to the process list...")
            else:
                print("Invalid selection.")
                time.sleep(1)
        else:
            print("Invalid input.")
            time.sleep(1)

if __name__ == "__main__":
    main()
